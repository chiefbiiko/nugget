# NOTE: based upon
#   http://www.daniloaz.com/en/use-gmail-with-your-own-domain-for-free-thanks-to-amazon-ses-lambda/
#   and
#   https://binx.io/blog/2019/11/14/how-to-deploy-aws-ses-domain-identities-dkim-records-using-cloudformation/
# READ: https://binx.io/blog/2018/03/17/deploying-aws-ses-access-key-and-smtp-password-using-aws-cloudformation/
# READ about: adding a SPF record to a hosted zone
AWSTemplateFormatVersion: 2010-09-09
Description: Mail forwarding service / Route53 domain <-> Gmail
Parameters:
  DomainName:
    Description: Route53 domain fx example.com
    Type: String
  HostedZoneId:
    Description: Idntifier of your domain's hosted zone
    Type: String
  FromEmail:
    Description: Email address to us as sender
    Type: String
  ForwardMapping:
    Description: JSON document mapping receptions to gmail targets
    Type: String
Resources:
  # [BEGIN_SECTION DOMAIN_VERIFICATION+DKIM_RECORDS]
  # see:
  #   https://github.com/binxio/cfn-ses-provider/blob/master/cloudformation/demo-stack.yaml
  #   and
  #   https://binx.io/blog/2019/11/14/how-to-deploy-aws-ses-domain-identities-dkim-records-using-cloudformation/
  DomainIdentity:
    Type: Custom::DomainIdentity
    Properties:
      Domain: !Ref 'DomainName'
      Region: !Ref 'AWS::Region'
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-ses-provider'

  VerifiedIdentity:
    Type: Custom::VerifiedIdentity
    DependsOn:
      - DkimRecords
      - VerificationRecords
    Properties:
      Identity: !GetAtt DomainIdentity.Domain
      Region: !GetAtt DomainIdentity.Region
      Dummy: true
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-ses-provider'

  VerificationRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
        Comment: !Sub 'SES identity for ${DomainName}'
        HostedZoneId: !Ref 'HostedZoneId'
        RecordSets: !GetAtt 'DomainIdentity.RecordSets'

  DkimTokens:
    Type: Custom::DkimTokens
    Properties:
      Domain: !GetAtt 'DomainIdentity.Domain'
      Region: !GetAtt 'DomainIdentity.Region'
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-ses-provider'

  DkimRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub 'DKIM records for ${DomainName}'
      HostedZoneId: !Ref 'HostedZoneId'
      RecordSets: !GetAtt 'DkimTokens.RecordSets'

  SnsTopic:
    Type: AWS::SNS::Topic

  IdentityNotifications:
    Type: Custom::IdentityNotifications
    Properties:
      Identity: !GetAtt VerifiedIdentity.Identity
      Region: !GetAtt VerifiedIdentity.Region
      BounceTopic: !Ref SnsTopic
      ComplaintTopic: !Ref  SnsTopic
      HeadersInBounceNotificationsEnabled: true
      HeadersInComplaintNotificationsEnabled: true
      ForwardingEnabled: false
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-ses-provider'
  # [END_SECTION DOMAIN_VERIFICATION+DKIM_RECORDS]

  # [BEGIN_SECTION FORWARDING_LAMBDA]
  # see: https://github.com/arithmetric/aws-lambda-ses-forwarder
  Bucket:
    Type: AWS::S3::Bucket
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: lambda.zip # zip ./lambda.zip ./index.js
      Environment:
        Variables:
          BUCKET_NAME: !Ref Bucket
          FROM_EMAIL: !Ref FromEmail
          FORWARD_MAPPING: !Ref ForwardMapping
          EMAIL_KEY_PREFIX: ""
          SUBJECT_PREFIX: ""
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 512
      Timeout: 30
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MailForwardingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: ses:SendRawEmail
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::{Bucket}/*
  # [END_SECTION FORWARDING_LAMBDA]

  # [BEGIN_SECTION MAIL_RECEPTION]
  # TODO
  # [END_SECTION MAIL_RECEPTION]

  # [BEGIN_SECTION MAIL_SENDING+SMTP_USER]
  # TODO
  # [END_SECTION MAIL_SENDING+SMTP_USER]

  # THEN: configure gmail manually